{
  "Tasks": {
    "DefaultHeaders": {

    },
    "DefaultCookies": {

    },
    "List": [
      {
        "Name": "测试",
        "Open": true,
        "MapToClient": "",
        "Api": "http://pv.sohu.com/cityjson?ie=utf-8",
        "Headers": {
          "Add": {
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Accept-Encoding": "gzip, deflate"
          },
          "Remove": {
            "RemoveAll": true
          }
        },
        "Cookies": {
          "Add": {},
          "Remove": {
            "RemoveAll": true
          }
        },
        "Method": "GET",
        "Content": {
          "Type": "StringContent", //[StringContent,FormUrlEncodedContent]
          "StringContent": {
            "Content": "",
            "Encoding": "",
            "MediaType": ""
          },
          "FormUrlEncodedContent": {
            "Dic": {}
          }
        }
      }
    ]
  },

  //安全相关配置
  "Security": {
    "IsSkipDailyTask": false, //是否跳过执行任务，用于特殊情况下，通过配置灵活的开启和关闭任务
    "IntervalSecondsBetweenRequestApi": 3, //两次调用api之间间隔的秒数[0,+]。因为有人担心在几秒内连续调用api会被b站安全机制发现，所以为不放心的朋友添加了间隔秒数配置，两次连续调用Api之间会大于该秒数
    "IntervalMethodTypes": "GET,POST", //间隔秒数所针对的HttpMethod，多个用英文逗号隔开，当前有GET和POST两种，可配置如“GET,POST”。服务器一般对GET请求不是很敏感，建议只针对POST请求做间隔就可以了
    "UserAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36 Edg/87.0.664.41", //请求B站接口时头部传递的User-Agent
    "WebProxy": "" //代理
  },

  //日志
  "Serilog": {
    "Using": [
      "Serilog.Sinks.Console",
      "Serilog.Sinks.Debug",
      "Serilog.Sinks.File",
      "Ray.Serilog.Sinks.TelegramBatched",
      "Ray.Serilog.Sinks.WorkWeiXinBatched",
      "Ray.Serilog.Sinks.DingTalkBatched",
      "Ray.Serilog.Sinks.ServerChanBatched",
      "Ray.Serilog.Sinks.CoolPushBatched",
      "Ray.Serilog.Sinks.OtherApiBatched"
    ],
    "MinimumLevel": {
      "Default": "Debug",
      "Override": {
        "Microsoft": "Warning",
        "System": "Warning",
        "Microsoft.AspNetCore": "Warning"
      }
    },
    "WriteTo": [
      //0.Console
      {
        "Name": "Console",
        "Args": {
          "restrictedToMinimumLevel": "Information",
          "outputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}"
        }
      },
      //1.Debug
      { "Name": "Debug" },
      //2.File
      {
        "Name": "File",
        "Args": {
          "path": "Logs/log.txt",
          "restrictedToMinimumLevel": "Verbose",
          "rollingInterval": 3
        }
      },
      //3.Telegram机器人
      {
        "Name": "TelegramBatched",
        "Args": {
          "botToken": "",
          "chatId": "",
          "containsTrigger": "开始推送",
          "restrictedToMinimumLevel": "Information"
        }
      },
      //4.企业微信机器人
      {
        "Name": "WorkWeiXinBatched",
        "Args": {
          "webHookUrl": "",
          "containsTrigger": "开始推送",
          "restrictedToMinimumLevel": "Information"
        }
      },
      //5.钉钉机器人
      {
        "Name": "DingTalkBatched",
        "Args": {
          "webHookUrl": "",
          "containsTrigger": "开始推送",
          "restrictedToMinimumLevel": "Information"
        }
      },
      //6.Server酱
      {
        "Name": "ServerChanBatched",
        "Args": {
          "scKey": "",
          "containsTrigger": "开始推送",
          "restrictedToMinimumLevel": "Information"
        }
      },
      //7.酷推
      {
        "Name": "CoolPushBatched",
        "Args": {
          "sKey": "",
          "containsTrigger": "开始推送",
          "restrictedToMinimumLevel": "Information"
        }
      },
      //8.自定义Api
      {
        "Name": "OtherApiBatched",
        "Args": {
          "api": "",
          "placeholder": "#msg#", //占位符
          "bodyJsonTemplate": "{\"msgtype\":\"markdown\",\"markdown\":{\"content\":#msg#}}", //json模板，会当作post的body，占位符会被日志内容替换（日志文本为json字符串，已经带有引号，所有模板中占位符不用使用引号包裹，如例子所示为企业微信的标准推送格式）
          "containsTrigger": "开始推送",
          "restrictedToMinimumLevel": "Information"
        }
      }
    ],
    "Enrich": [ "FromLogContext", "WithMachineName", "WithThreadId" ]
  },

  "CloseConsoleWhenEnd": "0" //运行结束后是否立即关闭
}
